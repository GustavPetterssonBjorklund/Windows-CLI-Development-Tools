SET name="Author: Gustav Pettersson"
SET email="Email: gustav.pettersson2@outlook.com"
<type .all>
  <file>
  <name>
  <email>
  <date>

<type .c>
  <raw>
    #include <stdio.h>
    #include <stdlib.h>
    \n
    int main(int argc, char *argv[]) {
      printf("Hello, World!\n");
      return 0;
    }

<type .cpp>
  <raw>
    #include <iostream>
    \n
    int main(int argc, char *argv[]) {
      std::cout << "Hello, World!" << std::endl;
      return 0;
    }

<type .py>
  <raw>
    print("Hello, World!")

<type .java>
  <raw>
    public class Main {
      public static void main(String[] args) {
        System.out.println("Hello, World!");
      }
    }

<type .js>
  <raw>
    console.log("Hello, World!");

<type .ts>
  <raw>
    console.log("Hello, World!");

<type .cs>
  <raw>
    using System;
    class Program {
      static void Main(string[] args) {
        Console.WriteLine("Hello, World!");
      }
    }

<type .php>
  <raw>
    <?php
    echo "Hello, World!";
    ?>

<type .rb>
  <raw>
    puts "Hello, World!"

<type .go>
  <raw>
    package main
    import "fmt"
    func main() {
      fmt.Println("Hello, World!")
    }

<type .swift>
  <raw>
    import Foundation
    print("Hello, World!")

<type .kt>
  <raw>
    fun main(args: Array<String>) {
      println("Hello, World!")
    }

<type .rs>
  <raw>
    fn main() {
      println!("Hello, World!");
    }

<type .pl>
  <raw>
    #!/usr/bin/perl
    print "Hello, World!\n";

<type .r>
  <raw>
    cat("Hello, World!\n")

<type .scala>
  <raw>
    object Main extends App {
      println("Hello, World!")
    }

<type .hs>
  <raw>
    main = putStrLn "Hello, World!"

<type .lua>
  <raw>
    print("Hello, World!")

<type .sh>
  <raw>
    #!/bin/sh
    echo "Hello, World!"

<type .ps1>
  <raw>
    Write-Host "Hello, World!"

<type .asm>
  <raw>
BITS 64
default rel

extern GetStdHandle
extern WriteFile
extern ExitProcess

global _start

section .data
  msg db "Hello, World!", 0
  msg_len equ $-msg

section .bss
  StdHandle resq 1
  BytesWritten resq 1

section .text
  _start:
    sub rsp, 40 ; Reserve space for the parameters
    ; Get standard output handle
    mov rcx, -11
    call GetStdHandle
    mov qword [StdHandle], rax

    ; Write message to standard output
    mov rcx, qword [StdHandle]
    lea rdx, [rel msg]
    mov r8d, msg_len
    lea r9, [rel BytesWritten]
    mov qword [rsp+32], 0
    call WriteFile

    ; Exit the process
    mov rcx, 0
    call ExitProcess
